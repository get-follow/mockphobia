<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mock Test Interface</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .question-status {
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
        }

        .question-status div {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
        }

        .selected-option {
            background-color: #4CAF50 !important;
            color: white;
        }
    </style>
</head>
<body class="bg-gray-100 font-sans">
    <div class="container mx-auto p-4">
        <h1 class="text-2xl font-bold text-center mb-6">Mock Test Management</h1>

        <!-- Main Actions -->
        <div id="mainActions" class="bg-white shadow p-4 rounded mb-6">
            <button id="createTestBtn" class="bg-blue-500 text-white px-4 py-2 rounded mr-4">Create New Test</button>
            <button id="viewTestsBtn" class="bg-green-500 text-white px-4 py-2 rounded">View Previous Tests</button>
        </div>

        <!-- Create Test Section -->
        <div id="createTestSection" class="hidden">
            <h2 class="text-xl font-bold mb-4">Create New Test</h2>
            <label class="block mb-2 font-semibold">Upload Physics Questions:</label>
            <input id="physicsUpload" type="file" multiple accept="image/*" class="block w-full p-2 border rounded mb-4" />

            <label class="block mb-2 font-semibold">Upload Chemistry Questions:</label>
            <input id="chemistryUpload" type="file" multiple accept="image/*" class="block w-full p-2 border rounded mb-4" />

            <label class="block mb-2 font-semibold">Upload Maths Questions:</label>
            <input id="mathsUpload" type="file" multiple accept="image/*" class="block w-full p-2 border rounded mb-4" />

            <button id="saveTestBtn" class="bg-blue-500 text-white px-4 py-2 rounded">Save Test</button>
        </div>

        <!-- Previous Tests Section -->
        <div id="previousTestsSection" class="hidden">
            <h2 class="text-xl font-bold mb-4">Previous Tests</h2>
            <ul id="testList" class="list-disc pl-6"></ul>
        </div>

        <!-- Test Conduction Page -->
        <div id="testConductionPage" class="hidden">
            <div class="flex">
                <div class="w-3/4 p-4 bg-white shadow rounded">
                    <h2 class="font-bold text-lg mb-4">Mock Test - <span id="testSubject"></span></h2>
                    <div class="text-red-500 font-bold text-xl mb-4" id="timer"></div>

                    <img id="currentQuestion" class="w-full h-96 object-contain mb-4" src="" alt="Question" />
                    <div id="answerOptions" class="space-y-2"></div>

                    <div class="mt-4">
                        <button id="prevBtn" class="bg-gray-300 px-4 py-2 rounded">Previous</button>
                        <button id="markReviewBtn" class="bg-purple-500 text-white px-4 py-2 rounded">Mark for Review</button>
                        <button id="nextBtn" class="bg-blue-500 text-white px-4 py-2 rounded">Next</button>
                        <button id="submitTestBtn" class="bg-red-500 text-white px-4 py-2 rounded ml-4">Submit Test</button>
                    </div>
                </div>

                <!-- Navigation Sidebar -->
                <div class="w-1/4 p-4 bg-gray-200 shadow rounded">
                    <h2 class="font-bold text-lg">Navigation</h2>
                    <div id="questionNav" class="question-status mt-4"></div>
                </div>
            </div>
        </div>

        <!-- Results Section -->
        <div id="resultSection" class="hidden mt-6 bg-white shadow p-4 rounded">
            <h2 class="text-xl font-bold mb-4">Test Summary</h2>
            <table class="w-full border-collapse border border-gray-300">
                <thead>
                    <tr>
                        <th class="border border-gray-300 px-4 py-2">Question No</th>
                        <th class="border border-gray-300 px-4 py-2">Status</th>
                        <th class="border border-gray-300 px-4 py-2">Response</th>
                    </tr>
                </thead>
                <tbody id="resultTable"></tbody>
            </table>
        </div>
    </div>

    <script>
        let tests = [];
        let currentTest = null;
        let questions = [];
        let responses = [];
        let currentIndex = 0;
        let timerInterval;
        let timeLeft = 180 * 60;

        const mainActions = document.getElementById('mainActions');
        const createTestSection = document.getElementById('createTestSection');
        const previousTestsSection = document.getElementById('previousTestsSection');
        const testConductionPage = document.getElementById('testConductionPage');
        const resultSection = document.getElementById('resultSection');
        const testList = document.getElementById('testList');
        const timer = document.getElementById('timer');

        document.getElementById('createTestBtn').addEventListener('click', () => {
            mainActions.classList.add('hidden');
            createTestSection.classList.remove('hidden');
        });

        document.getElementById('viewTestsBtn').addEventListener('click', () => {
            mainActions.classList.add('hidden');
            previousTestsSection.classList.remove('hidden');
            testList.innerHTML = '';
            tests.forEach((test, index) => {
                const li = document.createElement('li');
                li.textContent = `Test ${index + 1}`;
                li.addEventListener('click', () => startTest(test));
                testList.appendChild(li);
            });
        });

        document.getElementById('saveTestBtn').addEventListener('click', () => {
            const physicsFiles = Array.from(document.getElementById('physicsUpload').files);
            const chemistryFiles = Array.from(document.getElementById('chemistryUpload').files);
            const mathsFiles = Array.from(document.getElementById('mathsUpload').files);
            tests.push({ physics: physicsFiles, chemistry: chemistryFiles, maths: mathsFiles });
            alert('Test saved successfully!');
            createTestSection.classList.add('hidden');
            mainActions.classList.remove('hidden');
        });

        function startTest(test) {
            currentTest = test;
            questions = [...test.physics, ...test.chemistry, ...test.maths];
            responses = new Array(questions.length).fill(null);
            currentIndex = 0;
            timeLeft = 180 * 60;
            mainActions.classList.add('hidden');
            previousTestsSection.classList.add('hidden');
            testConductionPage.classList.remove('hidden');
            renderQuestion();
            startTimer();
        }

        function renderQuestion() {
            document.getElementById('currentQuestion').src = URL.createObjectURL(questions[currentIndex]);
            const options = currentIndex < 20 ? ['A', 'B', 'C', 'D'] : ['Numerical'];
            const answerOptions = document.getElementById('answerOptions');
            answerOptions.innerHTML = '';
            options.forEach(option => {
                const btn = document.createElement('button');
                btn.textContent = option;
                btn.className = `bg-gray-300 px-4 py-2 rounded mr-2 ${responses[currentIndex] === option ? 'selected-option' : ''}`;
                btn.addEventListener('click', () => {
                    responses[currentIndex] = option;
                    renderQuestion();
                });
                answerOptions.appendChild(btn);
            });
        }

        function startTimer() {
            timerInterval = setInterval(() => {
                if (timeLeft <= 0) {
                    clearInterval(timerInterval);
                    submitTest();
                } else {
                    const minutes = Math.floor(timeLeft / 60);
                    const seconds = timeLeft % 60;
                    timer.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
                    timeLeft--;
                }
            }, 1000);
        }

        document.getElementById('prevBtn').addEventListener('click', () => {
            if (currentIndex > 0) {
                currentIndex--;
                renderQuestion();
            }
        });

        document.getElementById('nextBtn').addEventListener('click', () => {
            if (currentIndex < questions.length - 1) {
                currentIndex++;
                renderQuestion();
            }
        });

        document.getElementById('markReviewBtn').addEventListener('click', () => {
            const questionNav = document.getElementById('questionNav');
            const questionStatus = questionNav.children[currentIndex];
            questionStatus.classList.add('bg-purple-500');
        });

        document.getElementById('submitTestBtn').addEventListener('click', submitTest);

        function submitTest() {
            clearInterval(timerInterval);
            testConductionPage.classList.add('hidden');
            resultSection.classList.remove('hidden');

            const resultTable = document.getElementById('resultTable');
            resultTable.innerHTML = '';
            questions.forEach((question, index) => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td class="border border-gray-300 px-4 py-2">${index + 1}</td>
                    <td class="border border-gray-300 px-4 py-2">
                        ${responses[index] ? 'Attempted' : 'Not Attempted'}
                    </td>
                    <td class="border border-gray-300 px-4 py-2">${responses[index] || '-'}</td>
                `;
                resultTable.appendChild(row);
            });
        }

        // Navigation bar rendering
        function renderNav() {
            const questionNav = document.getElementById('questionNav');
            questionNav.innerHTML = '';
            questions.forEach((_, index) => {
                const div = document.createElement('div');
                div.className = 'bg-gray-300';
                div.textContent = index + 1;
                div.addEventListener('click', () => {
                    currentIndex = index;
                    renderQuestion();
                });
                questionNav.appendChild(div);
            });
        }
    </script>
</body>
</html>

